{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleInputChange","e","currentTarget","value","reset","preventDefault","className","s","contactForm","type","onChange","pattern","title","required","button","ContactList","contacts","OnDeleteContact","contactList","map","id","contactItem","contactName","contactNumber","contactButton","onClick","Filter","filter","filterInput","App","setContacts","setFilter","useEffect","contactsStorage","JSON","parse","localStorage","getItem","setItem","stringify","some","contact","toLowerCase","alert","newContact","uuid","prev","normalizeFilter","includes","filterContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,YAAc,iCAAiC,YAAc,iCAAiC,YAAc,iCAAiC,cAAgB,mCAAmC,cAAgB,qC,mBCAlOD,EAAOC,QAAU,CAAC,OAAS,4BAA4B,YAAc,mC,gBCArED,EAAOC,QAAU,CAAC,YAAc,8B,yKCwEjBC,MApEf,YAAoC,IAAbC,EAAY,EAAZA,SACrB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAoB,SAAAC,GACxB,MAAwBA,EAAEC,cAAlBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MAEd,OAAQP,GACN,IAAK,OACHC,EAAQM,GACR,MAEF,IAAK,SACHJ,EAAUI,GACV,MAEF,QACE,SAUAC,EAAQ,WACZP,EAAQ,IACRE,EAAU,KAGZ,OACE,uBAAML,SAZa,SAAAO,GACnBA,EAAEI,iBACFX,EAAS,CAAEE,OAAME,WACjBM,KAS8BE,UAAWC,IAAEC,YAA3C,UACE,gCACE,sCACA,uBACEC,KAAK,OACLb,KAAK,OACLO,MAAOP,EACPc,SAAUV,EACVW,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAIZ,gCACE,wCACA,uBACEJ,KAAK,MACLb,KAAK,SACLO,MAAOL,EACPY,SAAUV,EACVW,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQP,UAAWC,IAAEO,OAArB,6B,gBC9BSC,MA/Bf,YAAqD,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,gBAC/B,OACE,oBAAIX,UAAWC,IAAEW,YAAjB,SACGF,EAASG,KAAI,gBAAGC,EAAH,EAAGA,GAAIxB,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACZ,qBAAaQ,UAAWC,IAAEc,YAA1B,UACE,sBAAMf,UAAWC,IAAEe,YAAnB,SAAiC1B,IACjC,sBAAMU,UAAWC,IAAEgB,cAAnB,SAAmCzB,IACnC,wBACEQ,UAAWC,IAAEiB,cACbf,KAAK,SACLgB,QAAS,kBAAMR,EAAgBG,IAHjC,sBAHOA,S,gBCcFM,MAlBf,YAA+B,IAAbhB,EAAY,EAAZA,SAChB,OACE,wBAAOJ,UAAWC,IAAEoB,OAApB,kCAEE,uBACElB,KAAK,OACLb,KAAK,SACLc,SAAUA,EACVJ,UAAWC,IAAEqB,kB,QC+DNC,MAjEf,WACE,MAAgClC,mBAAS,IAAzC,mBAAOqB,EAAP,KAAiBc,EAAjB,KACA,EAA4BnC,mBAAS,IAArC,mBAAOgC,EAAP,KAAeI,EAAf,KA8CA,OA5CAC,qBAAU,WACR,IAAMC,EAAkBC,KAAKC,MAAMC,aAAaC,QAAQ,aACpDJ,GACFH,EAAYG,KAEb,IAEHD,qBAAU,WACRI,aAAaE,QAAQ,WAAYJ,KAAKK,UAAUvB,MAC/C,CAACA,IAoCF,sBAAKV,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,CAAaZ,SApCE,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAC1B,GACEkB,EAASwB,MACP,SAAAC,GAAO,OAAIA,EAAQ7C,KAAK8C,gBAAkB9C,EAAK8C,iBAGjD,OAAOC,MAAM,GAAD,OAAI/C,EAAJ,6BAEZ,IAAMgD,EAAa,CACjBxB,GAAIyB,cACJjD,OACAE,UAEFgC,GAAY,SAAAgB,GAAI,OAAKF,GAAL,mBAAoBE,UAyBpC,sBAAKxC,UAAU,aAAf,UACE,0CACA,cAAC,EAAD,CAAQI,SAnBO,SAAAT,GACnB8B,EAAU9B,EAAEC,cAAcC,UAmBtB,cAAC,EAAD,CACEa,SAjBe,WACrB,IAAM+B,EAAkBpB,EAAOe,cAE/B,OAAO1B,EAASW,QAAO,SAAAc,GAAO,OAC5BA,EAAQ7C,KAAK8C,cAAcM,SAASD,MAatBE,GACVhC,gBA1Bc,SAAAG,GACpBU,GAAY,SAAAgB,GAAI,OAAIA,EAAKnB,QAAO,SAAAc,GAAO,OAAIA,EAAQrB,KAAOA,kBCrC9D8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3a251fd8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1C5Dc\",\"contactItem\":\"ContactList_contactItem__1Y8oL\",\"contactName\":\"ContactList_contactName__3jKKz\",\"contactNumber\":\"ContactList_contactNumber__1gW2F\",\"contactButton\":\"ContactList_contactButton__280l6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__hZRQk\",\"contactForm\":\"ContactForm_contactForm__3M_b7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__14x_t\"};","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport s from './ContactForm.module.css';\r\n\r\nfunction ContactForm({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit({ name, number });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.contactForm}>\r\n      <div>\r\n        <h2>Name</h2>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleInputChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Number</h2>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleInputChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </div>\r\n      <button className={s.button}>Add contact</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./ContactList.module.css\";\r\n\r\nfunction ContactList({ contacts, OnDeleteContact }) {\r\n  return (\r\n    <ul className={s.contactList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.contactItem}>\r\n          <span className={s.contactName}>{name}</span>\r\n          <span className={s.contactNumber}>{number}</span>\r\n          <button\r\n            className={s.contactButton}\r\n            type=\"button\"\r\n            onClick={() => OnDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nfunction Filter({ onChange }) {\r\n  return (\r\n    <label className={s.filter}>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        onChange={onChange}\r\n        className={s.filterInput}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import './App.css';\nimport { useState, useEffect } from 'react';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nimport { v1 as uuid } from 'uuid';\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const contactsStorage = JSON.parse(localStorage.getItem('contacts'));\n    if (contactsStorage) {\n      setContacts(contactsStorage);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = ({ name, number }) => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      return alert(`${name} is already in contacts.`);\n    } else {\n      const newContact = {\n        id: uuid(),\n        name,\n        number,\n      };\n      setContacts(prev => [newContact, ...prev]);\n    }\n  };\n\n  const deleteContact = id => {\n    setContacts(prev => prev.filter(contact => contact.id !== id));\n  };\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const filterContacts = () => {\n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter),\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={addContact} />\n\n      <div className=\"countainer\">\n        <h2>Contacts</h2>\n        <Filter onChange={changeFilter} />\n        <ContactList\n          contacts={filterContacts()}\n          OnDeleteContact={deleteContact}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}